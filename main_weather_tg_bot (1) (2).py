import requests
import datetime
from config import tg_bot_token, open_weather_token
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor


bot = Bot(token=tg_bot_token)
dp = Dispatcher(bot)
def recommend_clothes(temp: int) -> str:

    if temp < -30:
        if gender == "Мужской":
            return "Для экстремального мороза: специальная теплая куртка с капюшоном, которая плотно прилегает к телу и не пропускает ветер и холод, шапка, которая защищает голову и уши от холода, шарф, который можно обмотать вокруг шеи для дополнительного тепла, теплые ботинки с грубой подошвой, которые защищают от холодного снега и льда, и перчатки, которые защищают руки от мороза. Мужчины также могут использовать термобелье для дополнительной защиты от холода."
        elif gender == "Женский":
            return "Специальная теплая куртка с капюшоном: Хороший вариант - пуховая куртка или парка с водонепроницаемым внешним слоем. Ищите куртку с отстегивающимся капюшоном, чтобы можно было регулировать степень защиты. Для женщин популярны такие бренды, как The North Face, Canada Goose и Patagonia.Шапка: Выберите шапку, которая закрывает уши, например, бини или шапку с меховой отделкой. Шерстяные или флисовые материалы отлично сохраняют тепло.Шарф: Толстый длинный шарф из шерсти или кашемира поможет сохранить шею и лицо в тепле.Теплые ботинки: Для экстремальных холодов вам стоит вложить деньги в утепленные и водонепроницаемые сапоги. Ищите сапоги с толстой подошвой для лучшего сцепления с обледенелой поверхностью. Популярные бренды - Sorel и Ugg.Перчатки: Выбирайте утепленные и водонепроницаемые перчатки. Возможно, вы захотите найти перчатки с сенсорным экраном, чтобы вам не пришлось снимать их, чтобы воспользоваться телефоном"
        
    elif -30 <= temp < -15:
        if gender == "Мужской":
            return "Для очень холодной погоды: теплая куртка, которая обеспечивает достаточную защиту от холода, шапка, шарф, теплые ботинки и перчатки, которые также должны быть достаточно теплыми, чтобы защитить от холода."
        elif gender == "Женский":
            return "Для очень холодной погоды:Теплая куртка: Хорошим выбором может стать пальто из плотной шерсти или пуховик. Ищите куртку с высоким воротником, чтобы защитить шею.Шапка: та же, что и для очень холодной погоды.Шарф: Для очень холодной погоды может быть достаточно шарфа средней толщины из шерсти или кашемира.Теплые сапоги: Те же, что и для экстремально холодной погоды.Перчатки: Те же, что и для экстремально холодной погоды."
        
    elif -15 <= temp < 0:
        if gender == "Мужской":
            return "Для прохладной погоды: куртка, которая обеспечивает некоторую защиту от прохлады, шапка, теплая обувь и перчатки."
        elif gender == "Женский":
            return "Для прохладной погоды:Куртка: Легкое шерстяное пальто или джинсовая куртка - отличный вариант для прохладной погоды. Ищите такую куртку, которую можно сочетать со свитерами или кардиганами.Шапка: простая шапочка может быть хорошим выбором.Теплая обувь: Выбирайте обувь с закрытым носком из кожи или замши. Хорошим вариантом могут быть сапоги по щиколотку или мокасины.Перчатки: Выбирайте перчатки из тонкой шерсти или кожи."
    elif 0 <= temp < 10 :
        if gender == "Мужской":
            return "Прохладно! Наденьте теплую куртку или свитер, шапку и обувь на основе резины"
        elif gender == "Женский":
            return "Прохладно! Наденьте теплую куртку или свитер, шапку и обувь на основе резины, а также теплые колготки и юбку или платье на колене."
    elif 10 <= temp < 20:
        if gender == "Мужской":
            return "Для приятной погоды: легкая куртка, джинсы или брюки и легкая обувь. Мужчины могут носить футболки, рубашки или свитера в зависимости от температуры и сезона."
        elif gender == "Женский":
            return "Для хорошей погоды:Легкая куртка: Джинсовая или кожаная куртка может стать идеальным вариантом для хорошей погоды. Ищите куртку с удобным кроем и такими деталями, как молнии или шипы.Джинсы или брюки: Выбирайте джинсы-скинни или джинсы с прямыми ногами, а также приталенные брюки. Ищите удобный фасон.Легкая обувь: Выбирайте сандалии или кроссовки из холста или кожи. Избегайте высоких каблуков для такой погоды."
    elif 20 <= temp < 30:
        if gender == "Мужской":
            return "Для очень жаркой погоды: легкая одежда из натуральных тканей, таких как лён, хлопок, шелк или рейон, которые позволяют телу дышать и не вызывают потоотделение. Мужчины могут носить шорты, футболки, рубашки или поло, удобную обувь, шляпу и солнцезащитные очки для защиты от солнца."
        elif gender == "Женский":
            return "Для очень жаркой погоды:Легкая одежда из натуральных тканей: Выбирайте одежду из хлопка или льна, поскольку эти материалы воздухопроницаемы и легки. Ищите свободные топы и платья.Удобная обувь: Выбирайте сандалии или кроссовки из легких материалов, таких как холст или сетка.Шляпа: широкополая шляпа может обеспечить тень и защиту от солнца.Солнцезащитные очки: Ищите солнцезащитные очки с УФ-защитой, чтобы защитить глаза от солнечных лучей."  
gender=0


@dp.message_handler(commands=["start"])
async def start_command(message: types.Message):
    await message.reply("Здравствуйте укажите ваш пол (Мужской/Женский)")
    gender=0
@dp.message_handler()
async def get_gender(message: types.Message):
    global gender
    if message.text.lower() == "мужской":
        gender = "Мужской"
        await message.reply("Вы выбрали мужской пол, теперь напишите название города")
    elif message.text.lower() == "женский":
        gender = "Женский"
        await message.reply("Вы выбрали женский пол, теперь напишите название города")
    elif gender == 0 and message.text.lower() != "женский" and message.text.lower() != "мужской":
        await message.reply("Пожалуйста, укажите ваш пол (Мужской/Женский)")
    elif gender != 0:
    

        code_to_smile = {
            "Clear": "Ясно \U00002600",
            "Clouds": "Облачно \U00002601",
            "Rain": "Дождь \U00002614",
            "Drizzle": "Дождь \U00002614",
            "Thunderstorm": "Гроза \U000026A1",
            "Snow": "Снег \U0001F328",
            "Mist": "Туман \U0001F32B"
        }

        try:
            r = requests.get(
                f"http://api.openweathermap.org/data/2.5/weather?q={message.text}&appid={open_weather_token}&units=metric"
            )
            data = r.json()

            city = data["name"]
            cur_weather = data["main"]["temp"]
            

            weather_description = data["weather"][0]["main"]
            cloths= recommend_clothes(cur_weather)
            if weather_description in code_to_smile:
                wd = code_to_smile[weather_description]
            else:
                wd = "Посмотри в окно, не пойму что там за погода!"
            if weather_description in ["Rain", "Drizzle"]:
                doj='На улице идет дождь. Не забудьте зонт!'
            else:
                doj=''
            humidity = data["main"]["humidity"]
            pressure = data["main"]["pressure"]
            wind = data["wind"]["speed"]
            sunrise_timestamp = datetime.datetime.fromtimestamp(data["sys"]["sunrise"])
            sunset_timestamp = datetime.datetime.fromtimestamp(data["sys"]["sunset"])
            length_of_the_day = datetime.datetime.fromtimestamp(data["sys"]["sunset"]) - datetime.datetime.fromtimestamp(
                data["sys"]["sunrise"])

            await message.reply(f"***{datetime.datetime.now().strftime('%Y-%m-%d %H:%M')}***\n"
                f"Погода в городе: {city}\nТемпература: {cur_weather}C° {wd}\n"
                f"Влажность: {humidity}%\nДавление: {pressure} мм.рт.ст\nВетер: {wind} м/с\n"
                f"Восход солнца: {sunrise_timestamp}\nЗакат солнца: {sunset_timestamp}\nПродолжительность дня: {length_of_the_day}\n"
                f"Подходящая одежда:{cloths}{doj}"
                )

        except:
            await message.reply("\U00002620 Проверьте название города \U00002620")


if __name__ == '__main__':
    executor.start_polling(dp)